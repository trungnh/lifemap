<?php

/**
 * PluginPosTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PluginPosTable extends Doctrine_Table {

    const is_public = 1;
    const is_private = 0;
    const is_show = 1; // dia diem chung
    const is_un_show = 0; // dia diem rieng
    const prh_status_yes = 1;
    const online = 1;
    const pos_member_lifemap = 1; // member tạo các địa điểm từ crawl
    const r = 17; /* Bán kính 17 km */

    
    /**
     * Lấy danh sách pos của member có pager
     */
    public function getListPosOfMemberPager($member_id, $page = 1, $size = 10, $position = null) {
        $q = $this->getListPosOfMemberQuery($member_id, $position);
        return $this->getPager($q, $page, $size);
    }

    /**
     * Lấy danh sách pos của bạn bè có pager
     */
    public function getListPosOfFriendPager($member_id, $page = 1, $size = 10, $position = null) {
        $friendMemberIds = Doctrine::getTable('MemberRelationship')->getFriendMemberIds($member_id);
        if (!count($friendMemberIds)) {
            return null;
        }
        $q = $this->getListPosOfFriendQuery($friendMemberIds, $position);
        return $this->getPager($q, $page, $size);
    }

    /**
     * Lấy danh sách pos của search có paper
     */
    public function getListPosOfSearchPager($page = 1, $size = 10, $position = null) {
        $q = $this->getListPosOfSearchQuery($position);

        return $this->getPager($q, $page, $size);
    }

    /*
     * tuent
     */

    public function getListPosSearchByCategory($keyword, $category_id, $position = null, $page = 1, $size = 10) {
        $q = $this->getListPosOfSearchByCategoryQuery($keyword, $category_id, $position);

        return $this->getPager($q, $page, $size);
    }

    /* tuent
     * tìm kiếm địa điểm theo keyword và category
     */

    public function getListPosOfSearchByCategoryQuery($keyword, $category_id, $position) {
        $q = $this->createQuery();
        $q->andWhere('type =?', self::is_show);
        if ($category_id)
            $q->andWhere('pos_category_id=?', $category_id);
        $q->andWhere('lat < ?', $position['max_lat']);
        $q->andWhere('lat > ?', $position['min_lat']);
        $q->andWhere('lng < ?', $position['max_lng']);
        $q->andWhere('lng > ?', $position['min_lng']);
        $q->andWhere('is_public =?', self::is_public);
        $q->andwhere('meta LIKE ?', '%' . $keyword . '%');
        $q->orderBy('rank DESC');
        if ($q->count()) {
            return $q;
        } else {
            $position = opToolkit::expansionAreaSearch($position, 17);
            $q = $this->createQuery();
            $q->andWhere('type =?', self::is_show);
            if ($category_id)
                $q->andWhere('pos_category_id=?', $category_id);
            $q->andWhere('lat < ?', $position['max_lat']);
            $q->andWhere('lat > ?', $position['min_lat']);
            $q->andWhere('lng < ?', $position['max_lng']);
            $q->andWhere('lng > ?', $position['min_lng']);
            $q->andWhere('is_public =?', self::is_public);
            $q->andwhere('meta LIKE ?', '%' . $keyword . '%');
            $q->orderBy('rank DESC');
            if ($q->count()) {
                return $q;
            } else {
                $q = $this->createQuery();
                $q->andWhere('type =?', self::is_show);
                if ($category_id)
                    $q->andWhere('pos_category_id=?', $category_id);
                $q->andWhere('is_public =?', self::is_public);
                $q->andwhere('meta LIKE ?', '%' . $keyword . '%');
                $q->orderBy('rank DESC');
                return $q;
            }
        }
    }

    /**
     * Lấy danh sách pos theo searchByText, và code
     */
    public function getListSpecialPosOfSearchPager($page = 1, $size = 10, $position = null) {
        $q = $this->getListSpecialPosOfSearchQuery($position);

        return $this->getPager($q, $page, $size);
    }

    /**
     * Lấy danh sách pos đã check-in member có pager
     */
    public function getListPosCheckinPager($member_id, $page = 1, $size = 10, $position = null) {
        $q = $this->getListPosCheckinQuery($member_id, $position);

        return $this->getPager($q, $page, $size);
    }

    /**
     * Lấy danh sách pos đã Follow member có pager
     */
    public function getListPosFollowPager($member_id, $page = 1, $size = 10, $position = null) {
        $q = $this->getListPosFollowQuery($member_id, $position);

        return $this->getPager($q, $page, $size);
    }

    /**
     * Gửi mail
     */
    public function getListPossendmailPager($member_id, $page = 1, $size = 10, $position = null, $param = null) {
        $q = $this->getListPossendmailQuery($member_id, $position, $param);

        return $this->getPager($q, $page, $size);
    }

    /**
     *
     */
    public function getListPosOfMemberInAreaQuery($member_id, $min_lat, $min_lng, $max_lat, $max_lng) {
        $q = $this->createQuery();
        if ($member_id) {
            $q = $q->where('member_id = ?', $member_id);
        }
        if ($min_lat && $min_lng && $max_lat && $max_lng) {
            $q = $q->where('member_id = ?', $member_id);
        } else {
            return null;
        }
        return $q->orderBy('created_at DESC');
    }

    /**
     *
     */
    public function getListPosOfSearchQuery($position) {
        $q = $this->createQuery();
        $q->andWhere('type =?', self::is_show);
        $q->andWhere('lat < ?', $position['max_lat']);
        $q->andWhere('lat > ?', $position['min_lat']);
        $q->andWhere('lng < ?', $position['max_lng']);
        $q->andWhere('lng > ?', $position['min_lng']);
        $q->andWhere('is_public =?', self::is_public);
        $q->andwhere('meta LIKE ?', '%' . $position['keyword'] . '%');
        return $q->orderBy('created_at DESC');
    }

    public function getListSpecialPosOfSearchQuery($position) {
        $q = $this->createQuery('p');
        $q->andWhere('type = ?', self::is_show);
        $q->andWhere('lat < ?', $position['max_lat']);
        $q->andWhere('lat > ?', $position['min_lat']);
        $q->andWhere('lng < ?', $position['max_lng']);
        $q->andWhere('lng > ?', $position['min_lng']);
        $q->andwhere('title LIKE ?', '%' . $position['keyword'] . '%');
        return $q->orderBy('created_at DESC');
    }

    /**
     * Sinh sql lấy list pos của member
     */
    public function getListPosOfMemberQuery($member_id, $position) {
        $q = $this->createQuery()
                ->andWhere('type = ?', self::is_show)
                ->andWhere('lat < ?', $position['max_lat'])
                ->andWhere('lat > ?', $position['min_lat'])
                ->andWhere('lng < ?', $position['max_lng'])
                ->andWhere('lng > ?', $position['min_lng'])
                ->andWhere('member_id =?', $member_id)
                ->orderBy('created_at DESC');
        if ($q->count()) {
            return $q;
        } else {
            /*
             * tăng độ rộng lên 17km
             */
            $position = opToolkit::expansionAreaSearch($position, self::r);
            $q = $this->createQuery()
                    ->andWhere('type = ?', self::is_show)
                    ->andWhere('lat < ?', $position['max_lat'])
                    ->andWhere('lat > ?', $position['min_lat'])
                    ->andWhere('lng < ?', $position['max_lng'])
                    ->andWhere('lng > ?', $position['min_lng'])
                    ->andWhere('member_id =?', $member_id)
                    ->orderBy('created_at DESC');
            if ($q->count()) {
                return $q;
            }
            /*
             * trường hợp không tìm thấy địa điểm nào sau khi tăng độ rộng lên 17km
             */ else {
                /*
                 * tìm kiếm toàn bộ địa điểm 
                 */
                $q = $this->createQuery()
                        ->andWhere('type = ?', self::is_show)
                        ->andWhere('member_id =?', $member_id)
                        ->orderBy('created_at DESC');
                return $q;
            }
        }
    }

    /**
     * Sinh sql lấy list Pos của Friend
     */
    public function getListPosOfFriendQuery($friendMemberIds, $position) {
        $q = $this->createQuery('p')
                ->innerJoin('p.PosCheckin pc')
                ->whereIn('pc.member_id', $friendMemberIds)
                ->andWhere('pc.status = 1')
                ->andWhere('pc.is_public = ?', self::is_public)
                ->andWhere('p.is_public = ?', self::is_public)
                ->andWhere('p.type =?', self::is_show)
                ->andWhere('lat < ?', $position['max_lat'])
                ->andWhere('lat > ?', $position['min_lat'])
                ->andWhere('lng < ?', $position['max_lng'])
                ->andWhere('lng > ?', $position['min_lng'])
                ->orderBy('pc.created_at DESC');
        if ($q->count()) {
            return $q;
        } else {
            /*
             * tăng thêm độ rộng lên 17km
             * @muoidv
             */
            $position = opToolkit::expansionAreaSearch($position, self::r);
            $q = $this->createQuery('p')
                    ->innerJoin('p.PosCheckin pc')
                    ->whereIn('pc.member_id', $friendMemberIds)
                    ->andWhere('pc.status = 1')
                    ->andWhere('pc.is_public = ?', self::is_public)
                    ->andWhere('p.is_public = ?', self::is_public)
                    ->andWhere('p.type =?', self::is_show)
                    ->andWhere('lat < ?', $position['max_lat'])
                    ->andWhere('lat > ?', $position['min_lat'])
                    ->andWhere('lng < ?', $position['max_lng'])
                    ->andWhere('lng > ?', $position['min_lng'])
                    ->orderBy('pc.created_at DESC');
            if ($q->count()) {
                return $q;
            } else {
                /*
                 * khi tăng thêm 17km mà không tìm thấy vị trí nào của bạn bè
                 * thì tìm kiếm hết bản đồ vị trí của bạn bè
                 * @muoidv
                 */
                return $this->createQuery('p')
                                ->innerJoin('p.PosCheckin pc')
                                ->whereIn('pc.member_id', $friendMemberIds)
                                ->andWhere('pc.status = 1')
                                ->andWhere('pc.is_public = ?', self::is_public)
                                ->andWhere('p.is_public = ?', self::is_public)
                                ->andWhere('p.type =?', self::is_show)
                                ->orderBy('pc.created_at DESC');
            }
        }
    }

    /**
     * Sinh sql lấy list pos checkin của member
     */
    public function getListPosCheckinQuery($member_id, $position) {
        $q = $this->createQuery('p')
                ->innerJoin('p.PosCheckin pc')
                ->where('pc.member_id = ?', $member_id)
                ->andWhere('pc.is_public = ?', self::is_public)
                ->andWhere('p.is_public = ?', self::is_public)
                ->andWhere('p.type = ?', self::is_show)
                ->andWhere('lat < ?', $position['max_lat'])
                ->andWhere('lat > ?', $position['min_lat'])
                ->andWhere('lng < ?', $position['max_lng'])
                ->andWhere('lng > ?', $position['min_lng'])
                ->orderBy('pc.created_at DESC');
        if ($q->count()) {
            return $q;
        } else {
            /*
             * tăng độ rộng lêm 17km
             */
            $position = opToolkit::expansionAreaSearch($position, self::r);
            $q = $this->createQuery('p')
                    ->innerJoin('p.PosCheckin pc')
                    ->where('pc.member_id = ?', $member_id)
                    ->andWhere('pc.is_public = ?', self::is_public)
                    ->andWhere('p.is_public = ?', self::is_public)
                    ->andWhere('p.type = ?', self::is_show)
                    ->andWhere('lat < ?', $position['max_lat'])
                    ->andWhere('lat > ?', $position['min_lat'])
                    ->andWhere('lng < ?', $position['max_lng'])
                    ->andWhere('lng > ?', $position['min_lng'])
                    ->orderBy('pc.created_at DESC');
            if ($q->count()) {

                return $q;
            } else {
                /* lấy toàn bộ dữ liệu */
                $q = $this->createQuery('p')
                        ->innerJoin('p.PosCheckin pc')
                        ->where('pc.member_id = ?', $member_id)
                        ->andWhere('pc.is_public = ?', self::is_public)
                        ->andWhere('p.is_public = ?', self::is_public)
                        ->andWhere('p.type = ?', self::is_show)
                        ->orderBy('pc.created_at DESC');
                return $q;
            }
        }
    }

    /**
     * Sinh sql lấy list pos checkin của member
     */
    public function getListPosFollowQuery($member_id, $position) {
        $q = $this->createQuery('p')
                ->innerJoin('p.PosFollow pf')
                ->where('pf.member_id = ?', $member_id)
                ->andWhere('pf.is_public = ?', self::is_public)
                ->andWhere('p.is_public = ?', self::is_public)
                ->andWhere('p.type = ?', self::is_show)
                ->andWhere('lat < ?', $position['max_lat'])
                ->andWhere('lat > ?', $position['min_lat'])
                ->andWhere('lng < ?', $position['max_lng'])
                ->andWhere('lng > ?', $position['min_lng'])
                ->orderBy('pf.created_at DESC');
        if ($q->count()) {
            return $q;
        } else {

            $position = opToolkit::expansionAreaSearch($position, self::r);
            $q = $this->createQuery('p')
                    ->innerJoin('p.PosFollow pf')
                    ->where('pf.member_id = ?', $member_id)
                    ->andWhere('pf.is_public = ?', self::is_public)
                    ->andWhere('p.is_public = ?', self::is_public)
                    ->andWhere('p.type = ?', self::is_show)
                    ->andWhere('lat < ?', $position['max_lat'])
                    ->andWhere('lat > ?', $position['min_lat'])
                    ->andWhere('lng < ?', $position['max_lng'])
                    ->andWhere('lng > ?', $position['min_lng'])
                    ->orderBy('pf.created_at DESC');
            if ($q->count()) {
                return $q;
            } else {
                $q = $this->createQuery('p')
                        ->innerJoin('p.PosFollow pf')
                        ->where('pf.member_id = ?', $member_id)
                        ->andWhere('pf.is_public = ?', self::is_public)
                        ->andWhere('p.is_public = ?', self::is_public)
                        ->andWhere('p.type = ?', self::is_show)
                        ->orderBy('pf.created_at DESC');
                return $q;
            }
        }
    }

    /**
     *  Sinh sql lấy list pos sendmail của member
     */
    public function getListPossendmailQuery($member_id, $param, $position) {
        $q = $this->createQuery();
        if ($member_id) {
            $q = $q->where('member_id = ?', $member_id);
        }
        $q->andWhere('lat < ?', $position['max_lat']);
        $q->andWhere('lat > ?', $position['min_lat']);
        $q->andWhere('lng < ?', $position['max_lng']);
        $q->andWhere('lng > ?', $position['min_lng']);
        $q->andwhere('title LIKE ?', $position['keyword'] . '%');
        return $q->orderBy('created_at DESC');
    }

    /**
     *
     */
    public function getOrderdQuery($posId, $member_id) {
        $q = $this->createQuery();
        if ($posId) {
            $q = $q->where('pos_id =?', $posId);
        }
        if ($member_id) {
            $q = $q->andWhere('member_id = ?', $member_id);
        }
        return $q->orderBy('created_at DESC');
    }

    protected function getPager(Doctrine_Query $q, $page, $size) {
        $pager = new sfDoctrinePager('Pos', $size);
        $pager->setQuery($q);
        $pager->setPage($page);
        $pager->init();
        return $pager;
    }

    public function editAvatar($fileId, $posId) {
        $q = Doctrine_Query::create()
                ->update('Pos p')
                ->set('p.file_id', '?', $fileId)
                ->where('p.id = ?', $posId);
        return $q->execute();
    }

    public function editTags($tags, $posId) {
        $q = Doctrine_Query::create()
                ->update('Pos p')
                ->set('p.tags', '?', $tags)
                ->where('p.id = ?', $posId);
        return $q->execute();
    }

    /*
     * @author: tuent
     * get a pos by id
     */

    public function getPosById($posId) {
        $q = $this->createQuery('p')
                ->where('p.id = ?', $posId);

        return $q->fetchOne();
    }

    public function getListPosCompatibleCategoryPager($page = 1, $size = 10, $position = null) {
        $q = $this->getListPosCompatibleCategoryQuery($position);
        return $this->getPager($q, $page, $size);
    }

    /* huent
     * get pos by code category
     */

    public function getListPosCompatibleCategoryQuery($position) {
        $q = $this->createQuery('p');
        $q->innerJoin('p.PosCategory pc');
        $q->where('is_public = ?', self::is_public);
        $q->andWhere('pc.code =?', $position['type']);
        $q->andWhere('lat < ?', $position['max_lat']);
        $q->andWhere('lat > ?', $position['min_lat']);
        $q->andWhere('lng < ?', $position['max_lng']);
        $q->andWhere('lng > ?', $position['min_lng']);
        $q->orderBy('created_at DESC');
        return $q;
    }

    /* huent
     * tìm nhà
     */

    public function getResultSearchRentHousePager($page = 1, $size = 10, $position = null) {
        $q = $this->getResultSearchRentHouseQuery($position);
        return $this->getPager($q, $page, $size);
    }

    public function getResultSearchRentHouseQuery($position) {
        $q = $this->createQuery('p');
        $q->innerJoin('p.PosRentHouse r');
        $q->where('p.is_public = ?', self::is_public);
        if ($position['keyword'] != '')
            $q->andWhere('p.meta LIKE ?', '%' . $position['keyword'] . '%');
        $q->andWhere('lat < ?', $position['max_lat']);
        $q->andWhere('lat > ?', $position['min_lat']);
        $q->andWhere('lng < ?', $position['max_lng']);
        $q->andWhere('lng > ?', $position['min_lng']);
        //        if($position['type_rent_house'] != '') {
        //            $q->andWhere('pos_sub_category_id = ?',$position['type_rent_house']);
        //        }
        if ($position['time_post']) {
            $time_post = $position['time_post'];
            switch ($time_post) {
                case 1:
                    $time = date('Y-m-d H:i:s', strtotime('- 1 day', time()));
                    break;
                case 2:
                    $time = date('Y-m-d H:i:s', strtotime('- 2 day', time()));
                    break;
                case 3:
                    $time = date('Y-m-d H:i:s', strtotime('- 3 day', time()));
                    break;
                case 4:
                    $time = date('Y-m-d H:i:s', strtotime('- 1 week', time()));
                    break;
                case 5:
                    $time = date('Y-m-d H:i:s', strtotime('- 1 month', time()));
                    break;
            }
            $q->andWhere('p.created_at < ?', $time);
        }
        if ($position['price']) {
            $q->andWhere('r.const_price_ranges = ?', $position['price']);
        }
        if ($position['area']) {
            $area = $position['area'];
            switch ($area) {
                case 1:
                    $q->andWhere('r.area > ? AND r.area <= ?', array(0, 30));
                    break;
                case 2:
                    $q->andWhere('r.area > ? AND r.area <?', array(30, 50));
                    break;
                case 3:
                    $q->andWhere('r.area >= ? AND r.area <?', array(50, 80));
                    break;
                case 4:
                    $q->andWhere('r.area >= ? AND r.area <?', array(80, 100));
                    break;
                case 5:
                    $q->andWhere('r.area >= ? AND r.area <?', array(150, 200));
                    break;
            }
        }
        if ($position['num_room']) {
            $num_room = $position['num_room'];
            switch ($num_room) {
                case 1:
                    $q->andWhere('r.num_room = ?', 1);
                    break;
                case 2:
                    $q->andWhere('r.num_room = ?', 2);
                    break;
                case 3:
                    $q->andWhere('r.num_room = ?', 3);
                    break;
                case 4:
                    $q->andWhere('r.num_room = ?', 4);
                    break;
                case 5:
                    $q->andWhere('r.num_room = ?', 5);
                    break;
            }
        }
        $q->orderBy('p.created_at DESC');
        return $q;
    }

    /* huent
     * lấy các địa điểm của tôi theo từng loại riêng code khác nhau
     */

    public function getListSpecialPosOfMemberPager($member, $page, $size, $position = null) {
        $q = $this->getListSpecialPosOfMemberQuery($member_id, $position);
        return $this->getPager($q, $page, $size);
    }

    /**
     * Sinh sql lấy list pos của member
     */
    public function getListSpecialPosOfMemberQuery($member_id, $position) {
        $posCategory = Doctrine::getTable('PosCategory')->getCategoryFromCode(PluginPosCategoryTable::rent_house_code);
        $q = $this->createQuery();
        if ($member_id) {
            $q = $q->where('member_id = ?', $member_id);
        }
        $q->andWhere('pos_category_id =?', $posCategory->getId());
        $q->andWhere('lat < ?', $position['max_lat']);
        $q->andWhere('lat > ?', $position['min_lat']);
        $q->andWhere('lng < ?', $position['max_lng']);
        $q->andWhere('lng > ?', $position['min_lng']);
        return $q->orderBy('created_at DESC');
    }

    /* lay danh sach nha cho thue cua toi */

    public function getListSpecialPosFollowPager($member_id, $page = 1, $size = 10, $position = null) {
        $q = $this->getListSpecialPosFollowQuery($member_id, $position);

        return $this->getPager($q, $page, $size);
    }

    /**
     * Sinh sql lấy list pos checkin của member
     */
    public function getListSpecialPosFollowQuery($member_id, $position) {
        $posCategory = Doctrine::getTable('PosCategory')->getCategoryFromCode(PluginPosCategoryTable::rent_house_code);
        return $this->createQuery('p')
                        ->innerJoin('p.PosFollow pl')
                        ->where('pl.member_id = ?', $member_id)
                        ->andWhere('pl.pos_category_id =?', $posCategory->getId())
                        ->andWhere('pl.is_public = ?', self::is_public)
                        ->andWhere('pl.status =?', self::is_show)
                        ->andWhere('p.is_public = ?', self::is_public)
                        ->andWhere('lat < ?', $position['max_lat'])
                        ->andWhere('lat > ?', $position['min_lat'])
                        ->andWhere('lng < ?', $position['max_lng'])
                        ->andWhere('lng > ?', $position['min_lng'])
                        ->orderBy('p.created_at DESC');
    }

    /**
     * Component list dia diem moi đăng
     * @author muoidv
     */
    public function getLastestPos($num = null) {
        return $this->createQuery('p')
                        ->where('is_public =?', self::is_public)
                        ->orderBy('p.created_at DESC')
                        ->limit($num)
                        ->execute();
    }

    /*
     * lấy về danh sách các địa điểm mới đăng
     * muoidv
     */

    public function getListNewPosQuery($position) {
        $q = $this->createQuery('p');
        $q->innerJoin('p.PosCategory c');
        $q->andWhere('p.is_public = ?', self::is_public);
        $q->andWhere('c.type =?', $position['type']);
        $q->andWhere('lat < ?', $position['max_lat']);
        $q->andWhere('lat > ?', $position['min_lat']);
        $q->andWhere('lng < ?', $position['max_lng']);
        $q->andWhere('lng > ?', $position['min_lng']);
        return $q->orderBy('p.created_at DESC');
    }

    public function getListNewPos($page = 1, $size = 10, $position = null) {
        $q = $this->getListNewPosQuery($position);
        return $this->getPager($q, $page, $size);
    }

    /*
     * lấy về các địa điểm mới đăng
     * auth: muoidv
     */

    public function getListNewRentHouseQuery($position) {
        $q = $this->createQuery('p');
        $q->innerJoin('p.PosCategory c');
        $q->andWhere('p.is_public = ?', self::is_public);
        $q->andWhere('c.code =?', $position['type']);
        $q->andWhere('lat < ?', $position['max_lat']);
        $q->andWhere('lat > ?', $position['min_lat']);
        $q->andWhere('lng < ?', $position['max_lng']);
        $q->andWhere('lng > ?', $position['min_lng']);
        return $q->orderBy('p.created_at DESC');
    }

    public function getListNewRentHouse($page = 1, $size = 10, $position = null) {
        $q = $this->getListNewRentHouseQuery($position);
        return $this->getPager($q, $page, $size);
    }

    /*
     * lấy về danh sách các địa điểm 
     * thuclh
     */

    public function getListAllPosQuery($position) {
        $q = $this->createQuery('p');
        return $q->orderBy('p.created_at DESC');
    }

    public function getListAllPos($page = 1, $size = 10, $position = null) {
        $q = $this->getListAllPosQuery($position);
        return $this->getPager($q, $page, $size);
    }

    /* huent
     * Danh sách địa điểm mới đăng, không hiện các địa điểm đặc biệt: nhà cho thuê,...
     */

    public function getNewestPos($num) {
        if ($num)
            return $this->createQuery()
                            ->where('type =?', self::is_show)
                            ->andWhere('is_public =?', self::is_public)
                            ->orderBy('created_at DESC')
                            ->limit($num)
                            ->execute();
    }

    /* huent
     * Các hàm dành cho nhà dashboard cho thuê
     * Danh sách nhà cho thuê mới nhất
     */

    public function getNewestRentHouse($num) {
        $posCategory = Doctrine::getTable('PosCategory')->getCategoryFromCode(PluginPosCategoryTable::rent_house_code);
        return $this->createQuery()
                        ->where('pos_category_id =?', $posCategory->getId())
                        ->andWhere('is_public =?', self::is_public)
                        ->orderBy('created_at DESC')
                        ->limit($num)
                        ->execute();
    }

    /* Danh sách nhà cho thuê mới cập nhật trạng thái có */

    public function getUpdateStatusRentHouseList($num) {
        return $this->createQuery('p')
                        ->innerJoin('p.PosRentHouse prh')
                        ->where('prh.status =?', self::prh_status_yes)
                        ->andWhere('p.is_public =?', self::is_public)
                        ->orderBy('p.created_at DESC')
                        ->limit($num)
                        ->execute();
    }

    /* pager danh sách địa điểm mới */

    public function getNewestPosPager($page = 1, $size = 30) {
        $q = $this->createQuery()
                ->where('type =?', self::is_show)
                ->andWhere('is_public =?', self::is_public)
                ->orderBy('created_at DESC');
        return $this->getPager($q, $page, $size);
    }

    /* pager danh sách nhà cho thuê mới */

    public function getNewestRentHousePager($page = 1, $size = 30) {
        $posCategory = Doctrine::getTable('PosCategory')->getCategoryFromCode(PluginPosCategoryTable::rent_house_code);
        $q = $this->createQuery()
                ->where('pos_category_id =?', $posCategory->getId())
                ->andWhere('is_public =?', self::is_public)
                ->orderBy('created_at DESC');
        return $this->getPager($q, $page, $size);
    }

    /* pager danh sách nhà cho thuê mới cập nhật trạng thái có */

    public function getUpdateStatusRentHouseListPager($page = 1, $size = 30) {
        $q = $this->createQuery('p')
                ->innerJoin('p.PosRentHouse prh')
                ->where('prh.status =?', self::prh_status_yes)
                ->andWhere('p.is_public =?', self::is_public)
                ->orderBy('p.created_at DESC');
        return $this->getPager($q, $page, $size);
    }

    /**
     * Lấy danh sách pos member đã comment có pager
     */
    public function getListPosCommentPager($member_id, $page = 1, $size = 10, $position = null) {
        $q = $this->getListPosCommentQuery($member_id, $position);

        return $this->getPager($q, $page, $size);
    }

    /**
     * Sinh sql lấy list pos checkin của member
     */
    public function getListPosCommentQuery($member_id, $position) {
        $q = $this->createQuery('p')
                ->innerJoin('p.PosComment pc')
                ->where('pc.member_id = ?', $member_id)
                ->andWhere('pc.status = ?', self::is_show)
                ->andWhere('p.is_public = ?', self::is_public)
                ->andWhere('p.type = ?', self::is_show)
                ->andWhere('p.lat < ?', $position['max_lat'])
                ->andWhere('p.lat > ?', $position['min_lat'])
                ->andWhere('p.lng < ?', $position['max_lng'])
                ->andWhere('p.lng > ?', $position['min_lng'])
                ->orderBy('pc.created_at DESC');
        if ($q->count()) {
            return $q;
        } else {
            /*
             * tăng độ rộng lên thêm 17km
             */
            $position = opToolkit::expansionAreaSearch($position, self::r);
            $q = $this->createQuery('p')
                    ->innerJoin('p.PosComment pc')
                    ->where('pc.member_id = ?', $member_id)
                    ->andWhere('pc.status = ?', self::is_show)
                    ->andWhere('p.is_public = ?', self::is_public)
                    ->andWhere('p.type = ?', self::is_show)
                    ->andWhere('p.lat < ?', $position['max_lat'])
                    ->andWhere('p.lat > ?', $position['min_lat'])
                    ->andWhere('p.lng < ?', $position['max_lng'])
                    ->andWhere('p.lng > ?', $position['min_lng'])
                    ->orderBy('pc.created_at DESC');
            if ($q->count()) {
                return $q;
            }
            /*
             * trường hợp tăng độ rộng lên rồi mà ko tìm thấy đia điểm nào
             */ else {
                /*
                 * tìm kiếm khắp bản đồ
                 */
                $q = $this->createQuery('p')
                        ->innerJoin('p.PosComment pc')
                        ->where('pc.member_id = ?', $member_id)
                        ->andWhere('pc.status = ?', self::is_show)
                        ->andWhere('p.is_public = ?', self::is_public)
                        ->andWhere('p.type = ?', self::is_show)
                        ->orderBy('pc.created_at DESC');
                return $q;
            }
        }
    }

    /*
     * danh sách các địa điểm gần 1 pos
     * @muoidv
     */

    public function getListNearPos($lng, $lat, $position, $num) {
        $q = $this->createQuery('p');
        $q->andWhere('p.is_public = ?', self::is_public);
        $q->andWhere('p.pos_category_id =?', $position['type']);
        $q->andWhere('lat < ?', $lat[0]);
        $q->andWhere('lat > ?', $lat[1]);
        $q->andWhere('lng < ?', $lng[0]);
        $q->andWhere('lng > ?', $lng[1]);
        $q->orderBy('RAND()');
        $q->limit($num);
        return $q->execute();
    }

    /*
     * search by text rent house
     * @muoidv
     */

    public function getListRentHouseOfSearchPager($page = 1, $size = 10, $position = null) {
        $q = $this->getListRentHouseOfSearchQuery($position);

        return $this->getPager($q, $page, $size);
    }

    public function getListRentHouseOfSearchQuery($position) {
        $q = $this->createQuery("p");
        $q->innerJoin("p.PosRentHouse rh");
        $q->andWhere('p.is_public =?', self::is_public);
        $q->andWhere('p.lat < ?', $position['max_lat']);
        $q->andWhere('p.lat > ?', $position['min_lat']);
        $q->andWhere('p.lng < ?', $position['max_lng']);
        $q->andWhere('p.lng > ?', $position['min_lng']);
        $q->andwhere('p.meta LIKE ?', '%' . $position['keyword'] . '%');
        return $q->orderBy('p.created_at DESC');
    }

    /**
     * Lấy danh sách pos của searchAllByText có paper
     */
    public function getListPosOfSearchByTextPager($keyword, $page = 1, $size = 10) {
        $q = $this->getListPosOfSearchByTextQuery($keyword);

        return $this->getPager($q, $page, $size);
    }

    public function getListPosOfSearchByTextQuery($keyword) {
        $q = $this->createQuery();
        $q->where('type =?', self::is_show);
        $q->andWhere('is_public =?', self::is_public);
        $q->andwhere('meta LIKE ?', '%' . $keyword . '%');
        return $q->orderBy('created_at DESC');
    }

    public function getListPosOfSearchByText($keyword, $num) {
        $q = $this->createQuery();
        $q->where('type =?', self::is_show);
        $q->andWhere('is_public =?', self::is_public);
        $q->andwhere('meta LIKE ?', '%' . $keyword . '%');
        $q->orderBy('created_at DESC');
        $q->limit($num);
        return $q->execute();
    }

    /**
     * Lấy danh sách posRentHouse của searchAllByText có paper
     */
    public function getListRentHouseOfSearchByTextPager($keyword, $page = 1, $size = 10) {
        $q = $this->getListRentHouseOfSearchByTextQuery($keyword);

        return $this->getPager($q, $page, $size);
    }

    public function getListRentHouseOfSearchByTextQuery($keyword) {
        $q = $this->createQuery("p");
        $q->innerJoin("p.PosRentHouse rh");
        $q->andWhere('p.is_public =?', self::is_public);
        $q->andwhere('p.meta LIKE ?', '%' . $keyword . '%');
        return $q->orderBy('p.created_at DESC');
    }

    public function getListRentHouseOfSearchByText($keyword, $num) {
        $q = $this->createQuery("p");
        $q->innerJoin("p.PosRentHouse rh");
        $q->andWhere('p.is_public =?', self::is_public);
        $q->andwhere('p.meta LIKE ?', '%' . $keyword . '%');
        $q->orderBy('p.created_at DESC');
        $q->limit($num);
        return $q->execute();
    }

}