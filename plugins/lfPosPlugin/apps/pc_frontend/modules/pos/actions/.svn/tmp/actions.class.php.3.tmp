<?php

/**
 * devicelog actions.
 *
 * @package    OpenPNE
 * @subpackage devicelog
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 23810 2009-11-12 11:07:44Z Kris.Wallsmith $
 */
class posActions extends lfPosPluginActions {

/**
 * trang chính của bản đồ lifemap
 * @author thuclh
 */
    public function executeHome(sfWebRequest $request) {

    }

    /**
     * Chuc nang tim kiem dia diem
     *
     */
    public function executeSearchbytext(sfWebRequest $request) {

        $page = $request->getParameter("page", 1);
        $size = $request->getParameter("size", 5);
        $position = array(
            'min_lat' => $request->getParameter("min_lat", 0),
            'max_lat' => $request->getParameter("max_lat", 0),
            'min_lng' => $request->getParameter("min_lng", 0),
            'max_lng' => $request->getParameter("max_lng", 0),
            'keyword' => $request->getParameter('keyword')
        );        
        $this->pos_pager = Doctrine::getTable('Pos')->getListPosOfSearchPager($page, $size, $position);
        $this->pos_pager->init();
        if ($this->pos_pager->getNbResults()) {
            echo $this->returnPosListPagerJson($this->pos_pager);
        } else {
            echo $this->returnFalse("Không có kết quả nào phù hợp cho bạn");
        }

        return sfView::NONE;
    }

    public function executeMyplace(sfWebRequest $request) {
        $page = $request->getParameter("page", 1);
        $size = $request->getParameter("size", 5);
        $position = array(
            'min_lat' => $request->getParameter("min_lat", 0),
            'max_lat' => $request->getParameter("max_lat", 0),
            'min_lng' => $request->getParameter("min_lng", 0),
            'max_lng' => $request->getParameter("max_lng", 0)
        );
        if ($this->getUser()->getMemberId()) {
            $this->pos_pager = Doctrine::getTable('Pos')->getListPosOfMemberPager($this->getUser()->getMemberId(), $page, $size, $position);
            $this->pos_pager->init();
            if ($this->pos_pager->getNbResults()) {
                echo $this->returnPosListPagerJson($this->pos_pager);
            } else {
                echo $this->returnFalse("Bạn chưa tạo trong khu vực này!");
            }
        } else {
            echo $this->returnFalse("Bạn chưa đăng nhập!");
        }
        return sfView::NONE;
    }

    public function executeFriendplace(sfWebRequest $request) {
        $page = $request->getParameter("page", 1);
        $size = $request->getParameter("size", 5);
        $position = array(
            'min_lat' => $request->getParameter("min_lat", 0),
            'max_lat' => $request->getParameter("max_lat", 0),
            'min_lng' => $request->getParameter("min_lng", 0),
            'max_lng' => $request->getParameter("max_lng", 0)
        );
        if ($this->getUser()->getMemberId()) {
            $this->pos_pager = Doctrine::getTable('Pos')->getListPosOfFriendPager($this->getUser()->getMemberId(), $page, $size, $position);
            $this->pos_pager->init();
            if ($this->pos_pager->getNbResults()) {
                echo $this->returnPosListPagerJson($this->pos_pager, '', true);
            } else {
                echo $this->returnFalse("Bạn chưa tạo trong khu vực này!");
            }
        } else {
            echo $this->returnFalse("Bạn chưa đăng nhập!");
        }
        return sfView::NONE;
    }

    public function executeMycheckin(sfWebRequest $request) {
        $page = $request->getParameter("page", 1);
        $size = $request->getParameter("size", 5);
        $position = array(
            'min_lat' => $request->getParameter("min_lat", 0),
            'max_lat' => $request->getParameter("max_lat", 0),
            'min_lng' => $request->getParameter("min_lng", 0),
            'max_lng' => $request->getParameter("max_lng", 0)
        );

        if ($this->getUser()->getMemberId()) {
            $this->pos_pager = Doctrine::getTable('Pos')->getListPosCheckinPager($this->getUser()->getMemberId(), $page, $size, $position);
            $this->pos_pager->init();
            if ($this->pos_pager->getNbResults()) {
                echo $this->returnPosListPagerJson($this->pos_pager);
            } else {
                echo $this->returnFalse("Bạn chưa vào địa điểm nào trong khu vực này!");
            }
        } else {
            echo $this->returnFalse("Bạn chưa đăng nhập!");
        }
        return sfView::NONE;
    }

    public function executeMyfollow(sfWebRequest $request) {
        $page = $request->getParameter("page", 1);
        $size = $request->getParameter("size", 5);
        $position = array(
            'min_lat' => $request->getParameter("min_lat", 0),
            'max_lat' => $request->getParameter("max_lat", 0),
            'min_lng' => $request->getParameter("min_lng", 0),
            'max_lng' => $request->getParameter("max_lng", 0)
        );
        if ($this->getUser()->getMemberId()) {
            $this->pos_pager = Doctrine::getTable('Pos')->getListPosFollowPager($this->getUser()->getMemberId(), $page, $size, $position);
            $this->pos_pager->init();
            if ($this->pos_pager->getNbResults()) {
                echo $this->returnPosListPagerJson($this->pos_pager);
            } else {
                echo $this->returnFalse("Bạn chưa vào địa điểm nào trong khu vực này!");
            }
        } else {
            echo $this->returnFalse("Bạn chưa đăng nhập!");
        }
        return sfView::NONE;
    }

    public function executeMyComment(sfWebRequest $request) {
        $page = $request->getParameter("page", 1);
        $size = $request->getParameter("size", 5);
        $position = array(
            'min_lat' => $request->getParameter("min_lat", 0),
            'max_lat' => $request->getParameter("max_lat", 0),
            'min_lng' => $request->getParameter("min_lng", 0),
            'max_lng' => $request->getParameter("max_lng", 0)
        );

        if ($this->getUser()->getMemberId()) {
            $this->pos_pager = Doctrine::getTable('Pos')->getListPosCommentPager($this->getUser()->getMemberId(), $page, $size, $position);
            $this->pos_pager->init();
            if ($this->pos_pager->getNbResults()) {
                echo $this->returnPosListPagerJson($this->pos_pager);
            } else {
                echo $this->returnFalse("Bạn chưa vào địa điểm nào trong khu vực này!");
            }
        } else {
            echo $this->returnFalse("Bạn chưa đăng nhập!");
        }
        return sfView::NONE;
    }
    
    public function executeMysendmail(sfWebRequest $request) {
        $param = array(
            'title' => $request->getParameter('title'),
            'pos_id' => $request->getParameter('pos_id'),
            'content' => $request->getParameter('content'),
            'list_mail' => $request->getParameter('list_mail')
        );
        $mail = new opMailSend();
        $mail->setSubject(opConfig::get('sns_name') . '');
        $mail->setTemplate('pos/sendPosMail', $param);
        $mail->send($this->getValue('mobile_address'), opConfig::get('admin_mail_address'));
        return sfView::NONE;
    }

    /* Nguyen Hue 04/11/2011
     * Chức năng của function:
     *   + Hiển thị thông tin chi tiết của địa điểm như là một profile của địa điểm đó.
     *   + Hiện các thông tin : cơ bản, nâng cao cho từng loại địa điểm, ảnh, comment,
     *   + Những người like, những người đã check-in, bạn bè like, bạn bè check-in,
     *   + Bao nhiêu người đang check-in
     */

    public function executeProfile(sfWebRequest $request) {
        /* Moi PosCategory goi toi 1 nhom cac component rieng
         * PosCategory: rent_house
         */
        $this->sideMenuGadgets = null;
        $this->sideRightMenuGadgets = null;
        $this->gadgetConfig = sfConfig::get('op_gadget_list');
        $pos = Doctrine::getTable('Pos')->find($request->getParameter('id'));
        if ($pos) {
            $posCategory = Doctrine::getTable('PosCategory')->getTableNameOfCategory($pos->getPosCategoryId());
            if ($posCategory)
                $nameTable = $posCategory->getNameTable();
        }
        if ($nameTable) {
            $gadgetName = $this->getCodeOfCategory($nameTable);
            $gadgets = Doctrine::getTable('Gadget')->retrieveGadgetsByTypesName($gadgetName);
            $layout = Doctrine::getTable('SnsConfig')->get('posRentHouse_layout', 'layoutA');
            $this->setLayout($layout);
            $this->sideMenuGadgets = $gadgets['posRentHouseSideMenu'];
            $this->sideRightMenuGadgets = $gadgets['posRentHouseSideRightMenu'];
            $this->contentsGadgets = $gadgets['posRentHouseContents'];
        } else {
            $gadgets = Doctrine::getTable('Gadget')->retrieveGadgetsByTypesName('pos');
            $layout = Doctrine::getTable('SnsConfig')->get('pos_layout', 'layoutA');
            $this->setLayout($layout);

            $this->sideMenuGadgets = $gadgets['posSideMenu'];
            $this->sideRightMenuGadgets = $gadgets['posSideRightMenu'];
            $this->contentsGadgets = $gadgets['posContents'];
        }

        return sfView::SUCCESS;
    }

    public function executeComments(sfWebRequest $request) {
        if ($request->getParameter('posId') && $request->getParameter('comment')) {
            $posId = $request->getParameter('posId');
            $comment = $request->getParameter('comment');
            if ($posId != '' && $comment != '') {
                /* Save comment */
                $new = new PosComment();
                $new->pos_id = $posId;
                $new->content = $comment;
                $new->member_id = $this->getUser()->getMemberId();
                $new->status = 1;
                $new->save();

                /* test save */
                if ($new && $new->getId()) {
                    /* Lua vao bang posLog */
                    $posLog = Doctrine::getTable('PosLog')->savePosLog($this->getUser()->getMemberId(), $new->getId(), PluginPosTable::action_comment, PluginPosTable::is_public, $posId);

                    $this->is_send = 1;
                    $this->comment = Doctrine::getTable('PosComment')->find($new->getId());
                    $this->sender = $this->comment->getMember();
                    $senderImage = '';
                    if ($this->sender->getImageFileName())
                        $senderImage = $this->sender->getImageFileName()->getName();
                    $pos = Doctrine::getTable('Pos')->find($posId);
                    /* sent mail to member follow */
                    $params = array(
                        'content' =>$comment,
                        'subject' => 'Chia sẻ mới về địa điểm '.$pos->getTitle().' đăng bởi '.$this->sender->getName(),
                        'created_at'  =>$this->comment->getCreated_at(),
                        'senderName'  =>$this->sender->getName(),
                        'senderImage' =>$senderImage,
                    );
                    $this->sentMailToMemberFollow('sendCommentMail', $pos, $params, $this->sender->getId());
                } else {
                    $this->is_send = 0;
                }
            }
        }
        return sfView::SUCCESS;
    }

    /* show comment */

    public function executeCommentList(sfWebRequest $request) {
        $this->comments = Doctrine::getTable('PosComment')->getOrderdQuery($request->getParameter('id'));
        $this->posId = $request->getParameter('id');
        $this->pager = new sfDoctrinePager(
            'PosComment', 5);
        $this->pager->setQuery($this->comments);
        $this->pager->setPage($request->getParameter('page', 1));
        $this->pager->init();
    }

    /* edit avatar */

    public function executeAvatarEdit(sfWebRequest $request) {
        if ($request->hasParameter('id') && $request->hasParameter('posId')) {
            /* test ower */
            $this->pos = Doctrine::getTable('Pos')->find($request->getParameter('posId'));
            $this->image = Doctrine::getTable('PosPhoto')->find($request->getParameter('id'));
            $this->editAvatar = Doctrine::getTable('Pos')->editAvatar($this->image->getFile_id(), $request->getParameter('posId'));
            if ($this->editAvatar)
                echo true;
            else
                echo false;
            return sfView::NONE;
        }
    }
    /* check-in */

    public function executeCheckin(sfWebRequest $request) {
            if ($request->hasParameter('id')) {
                /* update checkin status = 0? */
                $checkin = Doctrine::getTable('PosCheckin')->editCheckInStatus($this->getUser()->getMemberId());

                /* Save check-in */
                $new = new PosCheckin();
                $new->pos_id = $request->getParameter('id');
                $new->member_id = $this->getUser()->getMemberId();
                $new->status = 1;
                $new->is_public = 1;
                $new->save();
                if ($new && $new->getId()) {
                    echo 'success';
                    //save log
                    $posLog = Doctrine::getTable('PosLog')->savePosLog($this->getUser()->getMemberId(), $new->getId(), PluginPosTable::action_checkin, PluginPosTable::is_public, $request->getParameter('id'));
                }
                else
                    echo 'error';
            }
        return sfView::NONE;
    }

    /* follow */

    public function executeFollow(sfWebRequest $request) {
          if ($request->hasParameter('id')) {
            /* update checkin status = 0? */
            $follow = Doctrine::getTable('PosFollow')->editFollowStatus($this->getUser()->getMemberId());

            /* Save check-in */
            $new = new PosFollow();
            $new->pos_id = $request->getParameter('id');
            $new->member_id = $this->getUser()->getMemberId();
            $new->status = 1;
            $new->is_public = 1;
            $new->save();
            if ($new && $new->getId()) {
              echo 'success';
              $posLog = Doctrine::getTable('PosLog')->savePosLog($this->getUser()->getMemberId(), $new->getId(), PluginPosTable::action_follow, PluginPosTable::is_public, $request->getParameter('id'));
            }
            else
              echo 'error';
          }
        return sfView::NONE;
    }

    /* follow list */

    public function executeFollowList(sfWebRequest $request) {
        if ($request->hasParameter('id') && $request->hasParameter('type')) {
            $pos = Doctrine::getTable('Pos')->find($request->getParameter('id'));
            if ($request->getParameter('type') == 'member') {
                $this->followMemberList = Doctrine::getTable('PosFollow')->getFollowMembers($request->getParameter('id'));
                $this->type = 'Danh sách thành viên đang follow tại '.$pos->getTitle();
            }
            if ($request->getParameter('type') == 'friend') {
                $this->followFriendList = Doctrine::getTable('PosFollow')->getFollowFriends($request->getParameter('id'), $this->getUser()->getMemberId());
                $this->type = 'Danh sách bạn bè của bạn đang follow tại '.$pos->getTitle();
            }
            return sfView::SUCCESS;
        }
        return sfView::NONE;
    }

    /* check-in list */

    public function executeCheckinList(sfWebRequest $request) {
        if ($request->hasParameter('id') && $request->hasParameter('type')) {
            $pos = Doctrine::getTable('Pos')->find($request->getParameter('id'));
            if ($request->getParameter('type') == 'online') {
                $this->checkingInList = Doctrine::getTable('PosCheckin')->getCheckingInList($request->getParameter('id'));
                $this->type = 'Danh sách thành viên đang check-in tại '.$pos->getTitle();
            }
            if ($request->getParameter('type') == 'friend') {
                $this->checkInFriendList = Doctrine::getTable('PosCheckin')->getCheckInFriendList($request->getParameter('id'), $this->getUser()->getMemberId());
                $this->type = 'Danh sách bạn bè của bạn đã check-in tại '.$pos->getTitle();
            }
            if ($request->getParameter('type') == 'member') {
                $this->checkInMemberList = Doctrine::getTable('PosCheckin')->getCheckInMemberList($request->getParameter('id'));
                $this->type = 'Danh sách thành viên đã check-in tại '.$pos->getTitle();
            }
            return sfView::SUCCESS;
        }
        return sfView::NONE;
    }

    /* add Tag */

    public function executeAddTag(sfWebRequest $request) {
        $this->posId = $request->getParameter('id');
        return sfView::SUCCESS;
    }

    public function executeSaveTag(sfWebRequest $request) {
        if ($request->hasParameter('tags') && $request->hasParameter('id')) {
            $this->pos = Doctrine::getTable('Pos')->find($request->getParameter('id'));
            $tags = $this->pos->getTags() . ',' . $request->getParameter('tags');
            $this->editTags = Doctrine::getTable('Pos')->editTags($tags, $request->getParameter('id'));
            $this->newTag = $request->getParameter('tags');
        }
        echo $this->newTag;
        return sfView::NONE;
    }

    /* Thêm cảnh báo xấu */

    public function executeWarn(sfWebRequest $request) {
        $this->posId = $request->getParameter('id');
        return sfView::SUCCESS;
    }

    public function executeSaveWarn(sfWebRequest $request) {
        if ($request->hasParameter('warn') && $request->hasParameter('id')) {
            $posId = $request->getParameter('id');
            $warn = $request->getParameter('warn');
            if ($posId != '' && $warn != '') {
                /* Save warn */
                $new = new PosWarn();
                $new->pos_id = $posId;
                $new->content = $warn;
                $new->member_id = $this->getUser()->getMemberId();
                $new->save();

                /* test save */
                if ($new->getId()) {
                    $this->is_send = 1;
                } else {
                    $this->is_send = 0;
                }
                echo $this->is_send;
            }
        }
        return sfView::NONE;
    }

    /* Upload image */

    public function executeUploadImage(sfWebRequest $request) {
        if ($request->hasParameter('id') && $this->getUser()->getMemberId()) {
            if ($request->hasParameter('file_desc'))
                $desc = $request->getParameter('file_desc');
            $uploaddir = '../web/images/data/';
            $original_filename = basename($_FILES['uploadfile']['name']);
            $fileType = explode('.', $_FILES["uploadfile"]["name"]);
            $type = $fileType[count($fileType) - 1];
            $fileName = 'p_' . $request->getParameter('id') . '_' . $this->getUser()->getMemberId() . '_' . md5($original_filename . time()) . '_' . $type;
            $filePath = $uploaddir . $fileName . '.' . $type;

            if (move_uploaded_file($_FILES['uploadfile']['tmp_name'], $filePath)) {
                /* Save Images to DB */
                $newFile = Doctrine::getTable('File')->save($fileName, $_FILES["uploadfile"]["type"], $_FILES["uploadfile"]["size"], $original_filename);
                if ($newFile->getId()) {
                    $posPhoto = Doctrine::getTable('PosPhoto')->save($this->getUser()->getMemberId(), $request->getParameter('id'), $newFile->getId(), 1, 1,$desc);
                    if ($posPhoto && $posPhoto->getId()) {
                        /* sent mail to member follow */
                        $sender = $posPhoto->getMember();
                        $pos = Doctrine::getTable('Pos')->find($request->getParameter('id'));
                        /* sent mail to member follow */
                        $params = array(
                            'subject' => $sender->getName() . ' mới đăng thêm ảnh cho địa điểm ' . $pos->getTitle(),
                            'created_at' => $posPhoto->getCreated_at(),
                            'image' => $posPhoto->getImageFileName(),
                        );
                        $this->sentMailToMemberFollow('uploadImageMail', $pos, $params, $sender->getId());
                        // save log
                        $posLog = Doctrine::getTable('PosLog')->savePosLog($this->getUser()->getMemberId(), $posPhoto->getId(), PluginPosTable::action_post_photo_pos, PluginPosTable::is_public, $request->getParameter('id'));

                        $returnupload = array("id" => $posPhoto->getId(), "filename" => $posPhoto->getImageFileName());
                        echo json_encode($returnupload);
                    }
                    else
                        echo false;
                }
            } else {
                echo false;
            }
        }
        return sfView::NONE;
    }

    /* huent
     * Xóa ảnh đã đăng
     */

    public function executeDeletePhotoPos(sfWebRequest $request) {
        if ($request->hasParameter('id')) {
            $posPhoto = Doctrine::getTable('PosPhoto')->deletePosPhoto($request->getParameter('id'));
            if ($posPhoto)
                echo true;
            else
                echo false;
        }else
            echo false;
        return sfView::NONE;
    }

    /* tuent
     * trả về latlng của địa điểm hiện trong db
     */

    public function executeGetLatlng(sfWebRequest $request) {
        $output = array();

        $pos_id = $request->getParameter('pos_id');
        $pos = Doctrine_Core::getTable('Pos')->find($pos_id);
        if ($pos) {
            $output['lat'] = $pos->getLat();
            $output['lng'] = $pos->getLng();

            echo json_encode($output);
        }
        return sfView::NONE;
    }

    /*
     * tuent
     * tạo địa điểm mới
     */

    function executeNewPos(sfWebRequest $request) {
        if ($this->getUser()->getMemberId()) {
        // receive data
            $member_id = $this->getUser()->getMemberId();
            $title = $request->getParameter('pos-title');
            $address = $request->getParameter('pos-address');
            $posCategoryId = $request->getParameter('pos-type');
            $posCategory = Doctrine::getTable('PosCategory')->find($posCategoryId);
            $lat = $request->getParameter('lat');
            $lng = $request->getParameter('lng');


            // save this position info to DB
            $pos = new Pos();
            $pos->member_id = $member_id;
            $pos->title = $title;
            $pos->address = $address;
            $pos->lat = $lat;
            $pos->lng = $lng;
            $pos->pos_category_id = $posCategoryId;
            $pos->type = $posCategory->getType();
            $pos->save();

            // save posLog
            $posLog = Doctrine::getTable('PosLog')->savePosLog($this->getUser()->getMemberId(), $pos->getId(), PluginPosTable::action_post_pos, PluginPosTable::is_public);
            echo json_encode(array('posId' => $pos->getId()));
        }
        return sfView::NONE;
    }

    /*
     * tuent
     * load ra tất cả các parent categories
     */

    function executeLoadAllCategories(sfWebRequest $request) {
        $parentCategories = Doctrine::getTable('PosCategory')->getAllParentCategories();
        echo json_encode($parentCategories);
        return sfView::NONE;
    }

    /*
     * tuent
     * lấy một địa điểm
     */

    function executeGetAPosition(sfWebRequest $request) {
        $posId = $request->getParameter('id');
        $pos = Doctrine_Core::getTable('Pos')->getPosById($posId);
        echo $this->convertPos2Json($pos);

        return sfView::NONE;
    }

    /* huent
     * Tìm nhà cho thuê
     */

    public function executeLoadSubCategory(sfWebRequest $request) {
        $code = $request->getParameter("type");
        $parentCategory = Doctrine::getTable('PosCategory')->getCategoryFromCode($code);
        if ($parentCategory) {
            $subCategories = Doctrine::getTable('PosCategory')->getSubCategories($parentCategory->getId());
            if ($subCategories) {
                $categories = array();
                foreach ($subCategories as $category) {
                    $categories[] = $category->getId() . ':' . $category->getName();
                }
                $return = array(
                    "status" => true,
                    "category" => $categories
                );
                echo json_encode($return);
            }else
                $this->returnFalse();
        }else
            $this->returnFalse();
        return sfView::NONE;
    }

    public function executeSearchbytextpos(sfWebRequest $request) {

        $page = $request->getParameter("page", 1);
        $size = $request->getParameter("size", 5);
        $position = array(
            'min_lat' => $request->getParameter("min_lat", 0),
            'max_lat' => $request->getParameter("max_lat", 0),
            'min_lng' => $request->getParameter("min_lng", 0),
            'max_lng' => $request->getParameter("max_lng", 0),
            'keyword' => $request->getParameter('keyword'),
            'type' => $request->getParameter('type')
        );
        $this->pos_pager = Doctrine::getTable('Pos')->getListSpecialPosOfSearchPager($page, $size, $position);
        $this->pos_pager->init();
        if ($this->pos_pager->getNbResults()) {
            echo $this->returnPosListPagerJson($this->pos_pager, $request->getParameter('type'));
        } else {
            echo $this->returnFalse("Không có kết quả nào phù hợp cho bạn");
        }

        return sfView::NONE;
    }
                /* send mail */

    public function sentMailToMemberFollow($template, $pos, $params, $senderId) {
        /* send mail to member */
        $member = Doctrine::getTable('Member')->find($pos->getMember_id());
        if ($member->getConfig('pc_address') && $senderId != $member->getId()) {
            opMailSend::sendTemplateMail($template, $member->getConfig('pc_address'), opConfig::get('admin_mail_address'), $params);
        }
        /* send mail to Ower */
        if ($pos->getOwer_id() && $senderId != $pos->getOwer_id()) {
            $ower = Doctrine::getTable('Member')->find($pos->getOwer_id());
            if ($ower->getConfig('pc_address'))
                opMailSend::sendTemplateMail($template, $ower->getConfig('pc_address'), opConfig::get('admin_mail_address'), $params);
        }
        /* send mail to editer */
        if ($pos->getEditer()) {
            $editerIds = explode(',', $pos->getEditer());
            foreach ($editerIds as $editerId) {
                $editer = Doctrine::getTable('Member')->find($editerId);
                if ($editerId != $senderId && $editer->getConfig('pc_address'))
                    opMailSend::sendTemplateMail($template, $editer->getConfig('pc_address'), opConfig::get('admin_mail_address'), $params);
            }
        }
        /* send mail to member follow */
        $memberFollows = Doctrine::getTable('PosFollow')->getFollowMembers($pos->getId());
        if ($memberFollows) {
            foreach ($memberFollows as $memberFollow) {
                if ($memberFollow->getMember_id() != $senderId) {
                    if ($memberFollow->getMember()->getConfig('pc_address'))
                        opMailSend::sendTemplateMail($template, $memberFollow->getMember()->getConfig('pc_address'), opConfig::get('admin_mail_address'), $params);
                }
            }
        }
    }

    /*
     * tuent
     * lấy các sub_categories của category tên là rent_house
     */

    public function executeLoadRenthouseSubCategories(sfWebRequest $request) {
        $sub_categories = array();
        if ($this->getUser()->getMemberId()) {
            $sub_categories = Doctrine::getTable('PosCategory')->getRentHouseSubCategories();
        }
        echo json_encode($sub_categories);

        return sfView::NONE;
    }

    /*
     * tuent
     * lưu nhà vào bảng Pos và PosRentHouse
     */

    public function executeSaveHouse(sfWebRequest $request) {
        if ($this->getUser()->getMemberId()) {
        // nhận dữ liệu cho Pos
            $member_id = $this->getUser()->getMemberId();
            $title = $request->getParameter('renthouse-title');
            $address = $request->getParameter('renthouse-address');
            $description = $request->getParameter('renthouse-description');
            $tel = $request->getParameter('renthouse-tel');
            $lat = $request->getParameter('lat');
            $lng = $request->getParameter('lng');
            $rent_house_code = PluginPosCategoryTable::rent_house_code;
            $rent_house_category_id = Doctrine_Core::getTable('PosCategory')->getParentCategoryId($rent_house_code);
            $pos_sub_category_id = $request->getParameter('renthouse-type');


            // lưu vào Pos
            $pos = new Pos();
            $pos->member_id = $member_id;
            $pos->title = $title;
            $pos->address = $address;
            $pos->description = $description;
            $pos->tel = $tel;
            $pos->lat = $lat;
            $pos->lng = $lng;
            $pos->pos_category_id = $rent_house_category_id;
            $pos->pos_sub_category_id = $pos_sub_category_id;
            $pos->save();

            // nhận dữ liệu cho PosRentHouse
            $pos_id = $pos->getId();
            $price = $request->getParameter('renthouse-price');
            $price_unit = $request->getParameter('renthouse-unit');
            $email = $request->getParameter('renthouse-email');
            $contact_name = $request->getParameter('renthouse-owner-name');
            $renthouse_area = $request->getParameter('renthouse-area');
            $area_unit = $request->getParameter('area-unit');
            $num_room = $request->getParameter('room-num');
            $contact_tel = $request->getParameter('renthouse-tel');
            $status = $request->getParameter('renthouse-status');


            // lưu vào PosRentHouse
            $rent_house = new PosRentHouse();
            $rent_house->pos_id = $pos_id;
            $rent_house->price = $price;
            $rent_house->unit_price = $price_unit;
            $rent_house->num_room = $num_room;
            $rent_house->direction = $direction;
            $rent_house->contact_name = $contact_name;
            $rent_house->contact_email = $email;
            $rent_house->contact_tel = $tel;
            $rent_house->status = $status;

            $rent_house->save();
            //save posLog
            if ($rent_house && $rent_house->getId()) {
                $posLog = Doctrine::getTable('PosLog')->savePosLog($member_id, $rent_house->getId(), PluginPosTable::action_post_house, PluginPosTable::is_public, $pos_id);
            }
            // trả về posId
            $output = array('id'=>$pos->getId());
            echo json_encode($output);
        }

        return sfView::NONE;
    }

    /*
     * tuent
     * lấy thông tin thành viên email, tên, điện thoại
     */

    function executeGetMemberInfo(sfWebRequest $request) {
        $output = array();
        if ($this->getUser()->getMemberId()) {
            $member = $this->getUser()->getMember();

            $output['email'] = $member->getConfig('pc_address');
            $output['name'] = $member->getName();
        }

        echo json_encode($output);

        return sfView::NONE;
    }

    /*
     * lấy về các địa điểm mới đăng
     * auth: muoidv
     */

    public function executeNewplace(sfWebRequest $request) {
        $page = $request->getParameter("page", 1);
        $size = $request->getParameter("size", 5);
        $position = array(
            'type' => '1',
            'min_lat' => $request->getParameter("min_lat", 0),
            'max_lat' => $request->getParameter("max_lat", 0),
            'min_lng' => $request->getParameter("min_lng", 0),
            'max_lng' => $request->getParameter("max_lng", 0)
        );
        $this->pos_pager = Doctrine::getTable('Pos')->getListNewPos($page, $size, $position);
        $this->pos_pager->init();

        if ($this->pos_pager->getNbResults()) {
            echo $this->returnPosListPagerJson($this->pos_pager);
        } else {
            echo $this->returnFalse("Vị trí bạn chọn hiện không có địa điểm mới nào được đăng");
        }
        return sfView::NONE;
    }

    /* tuent
     * kiểm tra người dùng hiện tại có được quyền sửa nhà hay ko
     */

    public function isAuthoritative($pos) {
        if ($pos->getOwer_id()) {
            if ($this->getUser()->getMemberId() == $pos->getOwer_id())
                return true;
        }
        if ($this->getUser()->getMemberId() == $pos->getMember_id())
            return true;
        if ($pos->getEditer()) {
            $editers = explode(',', $pos->getEditer());
            foreach ($editers as $editer) {
                if ($this->getUser()->getMemberId() == $editer) {
                    return true;
                }
            }
        }
        return false;
    }

    /*
     * send mail
     * @muoidv
     */
    public function executeSendMailForm(sfWebRequest $request) {

        if ($this->getUser()->getMemberId()) {
            if ($request->hasParameter('id')) {
                $this->pos = Doctrine::getTable('Pos')->find($request->getParameter('id'));
            }
        }
        return sfView::SUCCESS;
    }
    public function executeSendMail(sfWebRequest $request) {
        $param = array(
            'title' => $request->getParameter('title'),
            'content' => $request->getParameter('content'),
        );
        if(opMailSend::sendTemplateMail("sendPosMail", $request->getParameter('mailTo'), "noreply@lifemap.vn", $params)) {
            echo true;
        }else {
            echo false;
        }
        return sfView::NONE;
    }
    /* huent
     * Sửa ảnh đại diện tại trang pos_profile
     */
    public function executeShowListImageOfPos(sfWebRequest $request){
        if($request->hasParameter('id')){
             $this->allImages = Doctrine::getTable('PosPhoto')->getAllImagesPos($request->getParameter('id'));
        }
        return sfView::SUCCESS;
    }
}